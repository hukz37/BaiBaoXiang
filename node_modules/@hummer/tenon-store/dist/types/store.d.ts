interface StoreOptions {
    plugins?: Array<any>;
    strict?: Boolean;
}
export declare function createStore(options: StoreOptions): Store;
export declare class Store {
    private _committing;
    private _actions;
    private _actionSubscribers;
    private _mutations;
    _wrappedGetters: any;
    private _modules;
    _modulesNamespaceMap: any;
    private _subscribers;
    _makeLocalGettersCache: any;
    strict: Boolean;
    private _state;
    getters: any;
    constructor(options?: StoreOptions);
    install(app: any, injectKey: string): void;
    get state(): any;
    set state(v: any);
    commit(_type: any, _payload: any, _options: any): void;
    dispatch(_type: any, _payload: any): Promise<unknown> | undefined;
    subscribe(fn: any, options: any): () => void;
    subscribeAction(fn: any, options: any): () => void;
    watch(getter: any, cb: any, options: any): import("@vue/runtime-core").WatchStopHandle;
    replaceState(state: any): void;
    registerModule(path: any, rawModule: any, options?: any): void;
    unregisterModule(path: any): void;
    hasModule(path: any): any;
    hotUpdate(newOptions: any): void;
    _withCommit(fn: Function): void;
}
export {};
