import { Base } from "src/runtime";
export interface Style {
    [key: string]: string;
}
export declare enum MatchType {
    Class = 0,
    ID = 1,
    Attr = 2,
    Tag = 3
}
export interface RuleNode {
    selector: any;
    relation: string;
    matchType: MatchType;
}
export interface RuleSet {
    [key: string]: Array<RuleNode>;
    tagList: Array<RuleNode>;
    classList: Array<RuleNode>;
    attrList: Array<RuleNode>;
}
export interface RuleSetMap {
    global: RuleSet;
    [key: string]: RuleSet;
}
export declare const RuleKeyMap: Record<string, string>;
export declare enum RelationType {
    Subselector = 0,
    DescendantSpace = 1,
    Child = 2,
    DirectAdjacent = 3,
    IndirectAdjacent = 4
}
export declare const collectStyle: (ruleSetMap: RuleSetMap) => void;
export declare const getClassStyle: (instance: Base, className?: string, scoped?: Boolean, scopedId?: string | undefined) => {};
